// Code generated by gencontroller; DO NOT EDIT

package api

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/schema"
	"github.com/ken39arg/go-app-sample/app/data/request"
	"github.com/ken39arg/go-app-sample/app/data/response"
	"github.com/ken39arg/go-app-sample/app/errors"
)

type IsubataImplController interface {

	// POST /api/isubata/message_post
	MessagePostHandler(w http.ResponseWriter, r *http.Request)

	// GET /api/isubata/messages
	MessagesHandler(w http.ResponseWriter, r *http.Request)
}

func NewIsubataServer(c IsubataImplController) *http.ServeMux {
	server := http.NewServeMux()

	server.HandleFunc("/isubata/message_post", c.MessagePostHandler)

	server.HandleFunc("/isubata/messages", c.MessagesHandler)

	return server
}

func NewIsubataMessagePostRequest(r *http.Request) (*request.IsubataMessagePostRequest, *RequestChest, error) {
	chst, err := GetRequestChestFromContext(r.Context())
	if err != nil {
		return nil, nil, err
	}

	if chst.Player == nil {
		return nil, nil, errors.NewError(errors.Forbidden, "session required", nil)
	}

	req := &request.IsubataMessagePostRequest{}

	if r.Method != "POST" {
		return nil, nil, errors.MethodNotAllowedError
	}
	if err := json.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, nil, errors.NewError(errors.InvalidParam, "parse error", err)
	}

	if err := req.Validate(); err != nil {
		return nil, nil, err
	}
	return req, chst, nil
}

func NewIsubataMessagePostResponse() *response.IsubataMessagePostResponse {
	return &response.IsubataMessagePostResponse{}
}

func NewIsubataMessagesRequest(r *http.Request) (*request.IsubataMessagesRequest, *RequestChest, error) {
	chst, err := GetRequestChestFromContext(r.Context())
	if err != nil {
		return nil, nil, err
	}

	if chst.Player == nil {
		return nil, nil, errors.NewError(errors.Forbidden, "session required", nil)
	}

	req := &request.IsubataMessagesRequest{}

	if r.Method != "GET" {
		return nil, nil, errors.MethodNotAllowedError
	}
	q := r.URL.Query()
	for k := range q {
		if q.Get(k) == "" {
			q.Del(k)
		}
	}
	decoder := schema.NewDecoder()
	decoder.IgnoreUnknownKeys(true)
	if err := decoder.Decode(req, q); err != nil {
		return nil, nil, errors.NewError(errors.InvalidParam, "parse error", err)
	}

	if err := req.Validate(); err != nil {
		return nil, nil, err
	}
	return req, chst, nil
}

func NewIsubataMessagesResponse() *response.IsubataMessagesResponse {
	return &response.IsubataMessagesResponse{}
}
